library(devtools)
check()
use_mit_license("Haoran Xue; Xiaotong Shen; Wei Pan")
document()
check()
use_package("lasso2")
check()
build_manual()
install()
TLC
rm(list=ls())
library(MASS)
n = 300
pz = 100
C_pi = 0.5
Beta_DY = 0
### Covariance matrix of Z
Sigma_Z = matrix(0,pz,pz)
for(i in 1:(pz))
{
for(j in 1:(pz))
{
Sigma_Z[i,j] = 0.5^(abs(i-j))
}
}
### Covariance matrix of Errors
Sigma_error = matrix(c(1.5,0.75,0.75,1.5),nrow = 2)
### Effect Sizes
Gamma_ZD = c(0,rep(1,7),rep(0,pz-8))*0.5
Pi_ZY = c(0,rep(0,5),rep(1,2),rep(0,pz-8))*C_pi
#............................................................
set.seed(1)
Guo_sim_result = NULL
TLP_sim_result = NULL
TWAS_naive_sim_result = NULL
TWAS_oracle_sim_result = NULL
stage1_ind = which(c(Gamma_ZD)!=0)
stage2_ind = which(c(Pi_ZY)!=0)
sim_ind = 1
cat(sim_ind,"\n")
### generate data
Z = mvrnorm(n, mu = rep(0,pz), Sigma = Sigma_Z)
Random_Error = mvrnorm(n, mu = c(0,0), Sigma = Sigma_error)
D = Z%*%Gamma_ZD  + Random_Error[,1]
Y = Beta_DY*D + Z%*%Pi_ZY  + Random_Error[,2]
Z = scale(Z,scale = F)
D = scale(D,scale = F)
Y = scale(Y,scale = F)
OneSample_2ScML(Y = Y,D = D,Z = Z,
K1_vec = 5:10,K2_vec = 0:5,
tau1 = 1e-5,
tau2 = 1e-5)
OneSample_2ScML
OneSample_2ScML(Y = Y,D = D,Z = Z,
K1_vec = 5:10,K2_vec = 0:5,
tau1 = 1e-5,
tau2 = 1e-5)
sum(Gamma_ZD!=0)
sum(Pi_ZY!=0)
library(MASS)
# sample size for each two independent samples
n = 20000
# number of IVs
p = 30
# number of invalid IVs, the first num_invalid IVs are invalid
num_invalid = 0.3*p
# MAF for SNPs
MAF = 0.3
# causal effect from X to Y
theta_XY = -0.1
# standard deviation of phi_ZU
sd_phi_ZU = 0.1
K_vec = 7:11
# start simulation --------------------------------------------------------
sim_result_Egger = NULL
sim_result_TLP = NULL
sim_result_Oracle = NULL
set.seed(1)
sim_ind = 1
cat(sim_ind,"\n")
### first generate gamma_ZX from truncated normal at 0.1
gamma_ZX = NULL
i = 0
while (i<p) {
g = rnorm(1,0,0.2)
if(abs(g)>0.1)
{
gamma_ZX = c(gamma_ZX,g)
i = i + 1
}
}
### then generate alpha_ZY from normal
alpha_ZY = rnorm(num_invalid,0.5,0.075)
### then generate phi_ZU from normal
phi_ZU = rnorm(num_invalid,0,sd_phi_ZU)
### Now generate first sample
Z1 = matrix(rbinom(n*p,2,MAF),nrow = n)
U1 = Z1[,1:num_invalid]%*%phi_ZU + rnorm(n,0,1)
X1 = Z1%*%gamma_ZX + U1 + rnorm(n,0,1)
Y1 = theta_XY*X1 + Z1[,1:num_invalid]%*%alpha_ZY + U1 + rnorm(n,0,1)
Z1 = scale(Z1,scale = F)
X1 = scale(X1,scale = F)
Y1 = scale(Y1,scale = F)
### Now generate second sample
Z2 = matrix(rbinom(n*p,2,MAF),nrow = n)
U2 = Z2[,1:num_invalid]%*%phi_ZU + rnorm(n,0,1)
X2 = Z2%*%gamma_ZX + U2 + rnorm(n,0,1)
Y2 = theta_XY*X2 + Z2[,1:num_invalid]%*%alpha_ZY + U2 + rnorm(n,0,1)
Z2 = scale(Z2,scale = F)
X2 = scale(X2,scale = F)
Y2 = scale(Y2,scale = F)
###
gamma_hat = as.numeric(summary(lm(X1~Z1))$coef[-1,1])
Theta0_hat = solve(t(Z1)%*%Z1/n)
TwoSample_2ScML(Y = Y2,Z = Z2,
stage1_ind = 1:30,
gamma_hat = gamma_hat,
Theta0_hat = Theta0_hat,
sigma2_hat = (summary(lm(X1~Z1))$sigma)^2,
n2 = n,
K2_vec = 7:11,tau2 = 1e-5)
rm(list=ls())
use_readme_rmd()
build_readme()
library(MASS)
# sample size for each two independent samples
n = 20000
# number of IVs
p = 30
# number of invalid IVs, the first num_invalid IVs are invalid
num_invalid = 0.3*p
# MAF for SNPs
MAF = 0.3
# causal effect from X to Y
theta_XY = -0.1
# standard deviation of phi_ZU
sd_phi_ZU = 0.1
K_vec = 7:11
# start simulation --------------------------------------------------------
sim_result_Egger = NULL
sim_result_TLP = NULL
sim_result_Oracle = NULL
set.seed(1)
sim_ind = 1
cat(sim_ind,"\n")
### first generate gamma_ZX from truncated normal at 0.1
gamma_ZX = NULL
i = 0
while (i<p) {
g = rnorm(1,0,0.2)
if(abs(g)>0.1)
{
gamma_ZX = c(gamma_ZX,g)
i = i + 1
}
}
### then generate alpha_ZY from normal
alpha_ZY = rnorm(num_invalid,0.5,0.075)
### then generate phi_ZU from normal
phi_ZU = rnorm(num_invalid,0,sd_phi_ZU)
### Now generate first sample
Z1 = matrix(rbinom(n*p,2,MAF),nrow = n)
U1 = Z1[,1:num_invalid]%*%phi_ZU + rnorm(n,0,1)
X1 = Z1%*%gamma_ZX + U1 + rnorm(n,0,1)
Y1 = theta_XY*X1 + Z1[,1:num_invalid]%*%alpha_ZY + U1 + rnorm(n,0,1)
Z1 = scale(Z1,scale = F)
X1 = scale(X1,scale = F)
Y1 = scale(Y1,scale = F)
### Now generate second sample
Z2 = matrix(rbinom(n*p,2,MAF),nrow = n)
U2 = Z2[,1:num_invalid]%*%phi_ZU + rnorm(n,0,1)
X2 = Z2%*%gamma_ZX + U2 + rnorm(n,0,1)
Y2 = theta_XY*X2 + Z2[,1:num_invalid]%*%alpha_ZY + U2 + rnorm(n,0,1)
Z2 = scale(Z2,scale = F)
X2 = scale(X2,scale = F)
Y2 = scale(Y2,scale = F)
###
gamma_hat = as.numeric(summary(lm(X1~Z1))$coef[-1,1])
gamma_hat
(summary(lm(X1~Z1))$coef[-1,1])
summary(lm(X1~Z1))$coef
lm(X1~Z1)$coef
aaa = lm(X1~Z1)
summary(aaa)$sigma
build_readme()
knit_with_parameters('~/Desktop/TSLS_New_Spring2021/TScML/README.Rmd')
library(devtools)
use_r("TLC")
